<?php

namespace app\core;

use app\exceptions\DbException;
use app\exceptions\NotFoundException;
use Exception;
use PDO;


class JwtAuth
{

    static private string $secretKey = "test123";

    function __construct()
    {
    }

    /**
     * @throws NotFoundException
     */
    static function createUserToken(string $username, string $password) :NotFoundException|DbException|array
    {
        $db = Application::$app->database;

        $stm = $db->prepare("SELECT * from user where username = :username ");
        $stm->bindValue(":username", $username);
        $query = $db->isExecute($stm);
        if ($query === true) {

            $user = $stm->fetch(PDO::FETCH_ASSOC);
            if ($user && password_verify($password, $user['password'])) {

                $token = self::makeToken($user['id']);
                return array('token' => $token, 'username' => $user['username'], 'role' => $user['role']);
            }
            throw new NotFoundException('User not found');
        }
        return $query;
    }

    static function makeToken(int $userId): string
    {

        $payload = [
            "iat" => time(),
            "iss" => "localhost",
            "exp" => time() + (6 * 60 * 60 * 1),
            "userId" => $userId
        ];

        return JWT::encode($payload, self::$secretKey);
    }
    static function isAuth(string $token)
    {
        try {
            $decode = JWT::decode($token, self::$secretKey, ['HS256']);
            $userId = $decode->userId;
            $db = Application::$app->database;

            $stm = $db->prepare("SELECT * FROM user where id =:userId");
            $stm->bindValue(':userId', $userId);
            $db->isExecute($stm);
            return $stm->rowCount() ? $stm->fetch(PDO::FETCH_ASSOC) : false;
        } catch (Exception $e) {
            echo "Error:" . $e->getMessage();
            return false;
        }
    }
}
